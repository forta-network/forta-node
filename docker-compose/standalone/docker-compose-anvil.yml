# get the images ready by doing `make containers` at the root
# the run this like `docker compose up --remove-orphans --abort-on-container-exit`

# default logging settings to apply to all containers
# you can modify these as you wish
x-logging:
  &default-logging
  options:
    max-size: "50m"
    max-file: "10"

services:
  # forta service container definitions
  # you can skip the services if you are not sure about how to modify
  notifier:
    extends:
      file: ./services/docker-compose-notifier.yml
      service: notifier
    networks:
      - forta-node

  anvil:
    extends:
      file: ./services/docker-compose-foundry.yml
      service: anvil
    networks:
      - forta-node

  service-forta-nats:
    container_name: forta-nats
    logging: *default-logging
    image: nats:2.3.2
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222
    networks:
      - forta-node

  service-forta-json-rpc:
    container_name: forta-json-rpc
    logging: *default-logging
    # build this image by doing `make containers` at the root first
    image: forta-network/forta-node:latest
    command: /forta-node json-rpc
    ports:
      - 8545:8545
    networks:
      - forta-node
    # this file is mounted as an alternative form of the forta node config file
    volumes:
      - ${PWD}:/.forta
      - ${PWD}/docker-compose.yml:/.forta/wrapped-config.yml
    depends_on:
      - service-forta-nats

  service-forta-scanner:
    container_name: forta-scanner
    logging: *default-logging
    # build this image by doing `make containers` at the root first
    image: forta-network/forta-node:latest
    command: /forta-node scanner
    networks:
      - forta-node
    # this file is mounted as an alternative form of the forta node config file
    volumes:
      - ${PWD}:/.forta
      - ${PWD}/docker-compose.yml:/.forta/wrapped-config.yml
    depends_on:
      - notifier
      - anvil
      - service-forta-nats
      - service-forta-json-rpc
      # make sure that scanner depends on all of the bots so it succeeds to attach
      - bot-2
      - bot-3
      #- bot-2

      # forta bot definitions

  bot-3:
    container_name: forta-market-bot
    logging: *default-logging
    depends_on:
      - anvil
    image: ghcr.io/ipatka/forta-comet:latest
    networks:
      - forta-node
    environment:
      AGENT_GRPC_PORT: 50051
      JSON_RPC_HOST: forta-json-rpc
      JSON_RPC_PORT: 8545

  bot-2:
    container_name: forta-oracle-bot
    logging: *default-logging
    depends_on:
      - anvil
    image: disco.forta.network/bafybeigib3mqfx275y4rsyd3zpb3u25qsn6xnguin3yuynwgzqzqcxsksu@sha256:e621c5f2f0d1255b18229e784a76207174c87ac42eea9626b7cc25281beb928d
    networks:
      - forta-node
    environment:
      AGENT_GRPC_PORT: 50051
      JSON_RPC_HOST: forta-json-rpc
      JSON_RPC_PORT: 8545

networks:
  forta-node: {}

# specify the forta node config here!
# this is known to the scanner as a "wrapped config".
x-forta-config:
  chainId: 1

  scan:
    jsonRpc:
      # url: https://eth-mainnet.alchemyapi.io/v2/EY6V18pyHpLFp4QHTF4Mv88NFaPsw83U
      url: http://anvil:9545

  localMode:
    enable: true
    # webhookUrl: https://webhook.site/fortaoracle
    webhookUrl: http://notifier:3000/forta
    # webhook alerts are sent with a JWT which is signed using this key
    privateKeyHex: 9e3c1e3ef3fc5669b6d469dafe2aa80b3986c5c59715ebcafb7e02076475a68c
    logToStdout: true
    # define if it is necessary to use a block range
    # runtimeLimits:
    startBlock: ${FORK_BLOCK}
    # stopBlock: 17553593
    standalone:
      enable: true
      # make sure that the scanner knows the bot container names so it can attach
      botContainers:
        # - forta-bot-1
        - forta-oracle-bot
        - forta-market-bot
        #- forta-bot-2
