// Code generated by MockGen. DO NOT EDIT.
// Source: services/storage/ipfs.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shell "github.com/ipfs/go-ipfs-api"
)

// MockIPFSClient is a mock of IPFSClient interface.
type MockIPFSClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSClientMockRecorder
}

// MockIPFSClientMockRecorder is the mock recorder for MockIPFSClient.
type MockIPFSClientMockRecorder struct {
	mock *MockIPFSClient
}

// NewMockIPFSClient creates a new mock instance.
func NewMockIPFSClient(ctrl *gomock.Controller) *MockIPFSClient {
	mock := &MockIPFSClient{ctrl: ctrl}
	mock.recorder = &MockIPFSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSClient) EXPECT() *MockIPFSClientMockRecorder {
	return m.recorder
}

// AddToFiles mocks base method.
func (m *MockIPFSClient) AddToFiles(r io.Reader, path string, options ...shell.AddOpts) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, path}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToFiles", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToFiles indicates an expected call of AddToFiles.
func (mr *MockIPFSClientMockRecorder) AddToFiles(r, path interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, path}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFiles", reflect.TypeOf((*MockIPFSClient)(nil).AddToFiles), varargs...)
}

// Cat mocks base method.
func (m *MockIPFSClient) Cat(path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cat", path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cat indicates an expected call of Cat.
func (mr *MockIPFSClientMockRecorder) Cat(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cat", reflect.TypeOf((*MockIPFSClient)(nil).Cat), path)
}

// FilesCp mocks base method.
func (m *MockIPFSClient) FilesCp(ctx context.Context, src, dest string, options ...shell.FilesOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, src, dest}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesCp", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesCp indicates an expected call of FilesCp.
func (mr *MockIPFSClientMockRecorder) FilesCp(ctx, src, dest interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, src, dest}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesCp", reflect.TypeOf((*MockIPFSClient)(nil).FilesCp), varargs...)
}

// FilesLs mocks base method.
func (m *MockIPFSClient) FilesLs(ctx context.Context, path string, options ...shell.FilesOpt) ([]*shell.MfsLsEntry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesLs", varargs...)
	ret0, _ := ret[0].([]*shell.MfsLsEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesLs indicates an expected call of FilesLs.
func (mr *MockIPFSClientMockRecorder) FilesLs(ctx, path interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesLs", reflect.TypeOf((*MockIPFSClient)(nil).FilesLs), varargs...)
}

// FilesMkdir mocks base method.
func (m *MockIPFSClient) FilesMkdir(ctx context.Context, path string, options ...shell.FilesOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesMkdir", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesMkdir indicates an expected call of FilesMkdir.
func (mr *MockIPFSClientMockRecorder) FilesMkdir(ctx, path interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesMkdir", reflect.TypeOf((*MockIPFSClient)(nil).FilesMkdir), varargs...)
}

// FilesMv mocks base method.
func (m *MockIPFSClient) FilesMv(ctx context.Context, src, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesMv", ctx, src, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesMv indicates an expected call of FilesMv.
func (mr *MockIPFSClientMockRecorder) FilesMv(ctx, src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesMv", reflect.TypeOf((*MockIPFSClient)(nil).FilesMv), ctx, src, dest)
}

// FilesRead mocks base method.
func (m *MockIPFSClient) FilesRead(ctx context.Context, path string, options ...shell.FilesOpt) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesRead", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesRead indicates an expected call of FilesRead.
func (mr *MockIPFSClientMockRecorder) FilesRead(ctx, path interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesRead", reflect.TypeOf((*MockIPFSClient)(nil).FilesRead), varargs...)
}

// FilesRm mocks base method.
func (m *MockIPFSClient) FilesRm(ctx context.Context, path string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesRm", ctx, path, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesRm indicates an expected call of FilesRm.
func (mr *MockIPFSClientMockRecorder) FilesRm(ctx, path, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesRm", reflect.TypeOf((*MockIPFSClient)(nil).FilesRm), ctx, path, force)
}

// FilesStat mocks base method.
func (m *MockIPFSClient) FilesStat(ctx context.Context, path string, options ...shell.FilesOpt) (*shell.FilesStatObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesStat", varargs...)
	ret0, _ := ret[0].(*shell.FilesStatObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesStat indicates an expected call of FilesStat.
func (mr *MockIPFSClientMockRecorder) FilesStat(ctx, path interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesStat", reflect.TypeOf((*MockIPFSClient)(nil).FilesStat), varargs...)
}

// FilesWrite mocks base method.
func (m *MockIPFSClient) FilesWrite(ctx context.Context, path string, data io.Reader, options ...shell.FilesOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilesWrite", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesWrite indicates an expected call of FilesWrite.
func (mr *MockIPFSClientMockRecorder) FilesWrite(ctx, path, data interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesWrite", reflect.TypeOf((*MockIPFSClient)(nil).FilesWrite), varargs...)
}

// ID mocks base method.
func (m *MockIPFSClient) ID(peer ...string) (*shell.IdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range peer {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(*shell.IdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockIPFSClientMockRecorder) ID(peer ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIPFSClient)(nil).ID), peer...)
}

// RepoGC mocks base method.
func (m *MockIPFSClient) RepoGC(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoGC", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoGC indicates an expected call of RepoGC.
func (mr *MockIPFSClientMockRecorder) RepoGC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoGC", reflect.TypeOf((*MockIPFSClient)(nil).RepoGC), arg0)
}

// Unpin mocks base method.
func (m *MockIPFSClient) Unpin(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpin", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpin indicates an expected call of Unpin.
func (mr *MockIPFSClientMockRecorder) Unpin(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpin", reflect.TypeOf((*MockIPFSClient)(nil).Unpin), path)
}

// MockIPFSRouter is a mock of IPFSRouter interface.
type MockIPFSRouter struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSRouterMockRecorder
}

// MockIPFSRouterMockRecorder is the mock recorder for MockIPFSRouter.
type MockIPFSRouterMockRecorder struct {
	mock *MockIPFSRouter
}

// NewMockIPFSRouter creates a new mock instance.
func NewMockIPFSRouter(ctrl *gomock.Controller) *MockIPFSRouter {
	mock := &MockIPFSRouter{ctrl: ctrl}
	mock.recorder = &MockIPFSRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSRouter) EXPECT() *MockIPFSRouterMockRecorder {
	return m.recorder
}

// Provide mocks base method.
func (m *MockIPFSRouter) Provide(ctx context.Context, scanner, peerID, bloomFilter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", ctx, scanner, peerID, bloomFilter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provide indicates an expected call of Provide.
func (mr *MockIPFSRouterMockRecorder) Provide(ctx, scanner, peerID, bloomFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockIPFSRouter)(nil).Provide), ctx, scanner, peerID, bloomFilter)
}
